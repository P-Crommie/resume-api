name: Cloud Resume API CI/CD

on:
  pull_request:
    branches:
      - main
    types:
      - closed

jobs:
  CI:
    if: github.event.pull_request.merged
    runs-on: ubuntu-latest

    steps:
      - name: Clone repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.12"

      #   - name: Install Python Virtual ENV
      #     run: pip3 install virtualenv

      - name: Cache Requirements file
        uses: actions/cache@v2
        id: cache-venv
        with:
          path: venv
          key: ${{ runner.os }}-venv-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-venv-

      - name: Activate and Install Dependencies into Virtual env
        working-directory: ./app
        run: |
          python -m venv venv
          source venv/bin/activate
          python -m pip install --upgrade pip
          pip install -r requirements.txt
        if: steps.cache-venv.outputs.cache-hit != 'true'

      - name: Run UnitTest
        working-directory: ./app
        run: |
          . venv/bin/activate
          python -m unittest discover tests

    #   - name: Build dockerfile && Package
    #     run: |
    #       docker build -t specialproj-client -f .github/manifest/dockerfile.client .

    #   - name: Test Docker Image
    #     run: |
    #       bash .github/scripts/test_client.sh

    #   - name: Push Image to ECR
    #     run: |
    #       bash .github/scripts/publish_client.sh
    #     env:
    #       AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #       AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #       AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}

#   CD:
#     runs-on: ubuntu-latest
#     needs: [CI]
#     if: github.ref == 'refs/heads/main'
#     steps:
#       - name: Deploy
#         uses: appleboy/ssh-action@v0.1.10
#         with:
#           host: ${{ secrets.SPECIAL_PROJECT_HOST }}
#           username: ${{ secrets.SPECIAL_PROJECT_USER }}
#           key: ${{ secrets.SSH_PRIVATE_KEY }}
#           script: |
#             cd /home/ubuntu/proj
#             aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin 330858616968.dkr.ecr.eu-west-1.amazonaws.com
#             docker compose pull client
#             docker compose up -d client

#       - name: Test
#         run: |
#           sleep 40
#           curl http://${{ secrets.SPECIAL_PROJECT_HOST }}:8080

#   Report:
#     runs-on: ubuntu-latest
#     needs: [CI, CD]
#     if: ${{ always() }}
#     steps:
#       - uses: technote-space/workflow-conclusion-action@v3
#       - name: Slack Notification
#         uses: 8398a7/action-slack@v3
#         with:
#           status: ${{ env.WORKFLOW_CONCLUSION }}
#           fields: repo,message,commit,author,action,eventName,ref,workflow
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#           SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
